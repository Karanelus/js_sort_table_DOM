{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAc,SAAS,aAAa,CAAC,MACrC,EAAY,SAAS,aAAa,CAAC,SACnC,EAAW,SAAC,CAAlB,EACE,GAAI,AAAkB,UAAlB,OAAO,EAGT,OAAO,SAFU,EAAO,OAAO,CAAC,SAAU,IAI9C,EAEA,EAAY,gBAAgB,CAAC,QAAS,SAAC,CAAvC,EACE,IAAM,EAAkB,EAAG,EAAY,QAAQ,EACzC,EAAa,EAAE,MAAM,CAAC,OAAO,CAAC,MAC9B,EAAe,EAAe,OAAO,CAAC,GAGtC,EAAgB,AAFC,EAAG,EAAU,QAAQ,EAER,IAAI,CAAC,SAAC,CAAA,CAAG,CAA7C,EACE,IAAM,EAAQ,EAAE,QAAQ,CAAC,EAAa,CAAC,SAAS,CAC1C,EAAQ,EAAE,QAAQ,CAAC,EAAa,CAAC,SAAS,CAE1C,EAAS,EAAS,GAClB,EAAS,EAAS,UAExB,AAAI,MAAM,GACD,EAAM,aAAa,CAAC,GAGtB,EAAS,CAClB,EAEA,CAAA,EAAU,SAAS,CAAG,GAEtB,EAAc,OAAO,CAAC,SAAC,CAAvB,EACE,EAAU,WAAW,CAAC,EACxB,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar tableHeader = document.querySelector(\"tr\");\nvar tableBody = document.querySelector(\"tbody\");\nvar toNumber = function(string) {\n    if (typeof string === \"string\") {\n        var clearNum = string.replace(/[$, ]/g, \"\");\n        return parseInt(clearNum);\n    }\n};\ntableHeader.addEventListener(\"click\", function(e) {\n    var headerChildren = _to_consumable_array(tableHeader.children);\n    var columnName = e.target.closest(\"th\");\n    var sortedColumn = headerChildren.indexOf(columnName);\n    var columnsToSort = _to_consumable_array(tableBody.children);\n    var columnsSorted = columnsToSort.sort(function(a, b) {\n        var elemA = a.children[sortedColumn].innerHTML;\n        var elemb = b.children[sortedColumn].innerHTML;\n        var aToNum = toNumber(elemA);\n        var bToNum = toNumber(elemb);\n        if (isNaN(aToNum)) return elemA.localeCompare(elemb);\n        return aToNum - bToNum;\n    });\n    tableBody.innerHTML = \"\";\n    columnsSorted.forEach(function(el) {\n        tableBody.appendChild(el);\n    });\n});\n\n//# sourceMappingURL=index.1ca1dafa.js.map\n","'use strict';\n\nconst tableHeader = document.querySelector('tr');\nconst tableBody = document.querySelector('tbody');\nconst toNumber = (string) => {\n  if (typeof string === 'string') {\n    const clearNum = string.replace(/[$, ]/g, '');\n\n    return parseInt(clearNum);\n  }\n};\n\ntableHeader.addEventListener('click', (e) => {\n  const headerChildren = [...tableHeader.children];\n  const columnName = e.target.closest('th');\n  const sortedColumn = headerChildren.indexOf(columnName);\n  const columnsToSort = [...tableBody.children];\n\n  const columnsSorted = columnsToSort.sort((a, b) => {\n    const elemA = a.children[sortedColumn].innerHTML;\n    const elemb = b.children[sortedColumn].innerHTML;\n\n    const aToNum = toNumber(elemA);\n    const bToNum = toNumber(elemb);\n\n    if (isNaN(aToNum)) {\n      return elemA.localeCompare(elemb);\n    }\n\n    return aToNum - bToNum;\n  });\n\n  tableBody.innerHTML = '';\n\n  columnsSorted.forEach((el) => {\n    tableBody.appendChild(el);\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","tableHeader","document","querySelector","tableBody","toNumber","string","parseInt","replace","addEventListener","e","headerChildren","children","columnName","target","closest","sortedColumn","indexOf","columnsSorted","columnsToSort","sort","a","b","elemA","innerHTML","elemb","aToNum","bToNum","isNaN","localeCompare","forEach","el","appendChild"],"version":3,"file":"index.1ca1dafa.js.map"}